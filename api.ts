/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ChangePasswordRequest
 */
export interface ChangePasswordRequest {
    /**
     * new password, that will be used for logging
     * @type {string}
     * @memberof ChangePasswordRequest
     */
    newPassword: string;
}
/**
 * 
 * @export
 * @interface ConnectRequest
 */
export interface ConnectRequest {
    /**
     * WiFi network name
     * @type {string}
     * @memberof ConnectRequest
     */
    ssid: string;
    /**
     * Network password
     * @type {string}
     * @memberof ConnectRequest
     */
    password: string;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    detail?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface HotSpotRequest
 */
export interface HotSpotRequest {
    /**
     * WiFi hotspot name
     * @type {string}
     * @memberof HotSpotRequest
     */
    ssid: string;
    /**
     * Hotspot password
     * @type {string}
     * @memberof HotSpotRequest
     */
    password: string;
}
/**
 * 
 * @export
 * @interface LoginResponse
 */
export interface LoginResponse {
    /**
     * True if provided password is valid, else - false.
     * @type {boolean}
     * @memberof LoginResponse
     */
    valid: boolean;
}
/**
 * 
 * @export
 * @interface NetworksResponse
 */
export interface NetworksResponse {
    /**
     * Scanned data
     * @type {object}
     * @memberof NetworksResponse
     */
    scan: object;
    /**
     * UTC seconds scan timestamp.
     * @type {number}
     * @memberof NetworksResponse
     */
    time: number;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<string>}
     * @memberof ValidationError
     */
    loc: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    msg: string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    type: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Check if service is alive or not.
         * @summary Alive
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aliveApiV1AliveGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/scribe_connect/api/v1/alive`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Change password
         * @summary Change Password
         * @param {ChangePasswordRequest} changePasswordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePasswordApiV1ChangePasswordPatch: async (changePasswordRequest: ChangePasswordRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'changePasswordRequest' is not null or undefined
            if (changePasswordRequest === null || changePasswordRequest === undefined) {
                throw new RequiredError('changePasswordRequest','Required parameter changePasswordRequest was null or undefined when calling changePasswordApiV1ChangePasswordPatch.');
            }
            const localVarPath = `/scribe_connect/api/v1/changePassword`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBasic required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof changePasswordRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(changePasswordRequest !== undefined ? changePasswordRequest : {}) : (changePasswordRequest || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Connect device to the WiFi network.
         * @summary Connect
         * @param {ConnectRequest} connectRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        connectApiV1ConnectPost: async (connectRequest: ConnectRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'connectRequest' is not null or undefined
            if (connectRequest === null || connectRequest === undefined) {
                throw new RequiredError('connectRequest','Required parameter connectRequest was null or undefined when calling connectApiV1ConnectPost.');
            }
            const localVarPath = `/scribe_connect/api/v1/connect`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBasic required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof connectRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(connectRequest !== undefined ? connectRequest : {}) : (connectRequest || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get list of previously scanned networks. If networks wasnt scanned - it will response with error.
         * @summary Get Networks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNetworksApiV1NetworksGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/scribe_connect/api/v1/networks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBasic required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create hotspot. If device was connected to wifi network, it will be disconnected.
         * @summary Hotspot
         * @param {HotSpotRequest} hotSpotRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hotspotApiV1HotspotPost: async (hotSpotRequest: HotSpotRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'hotSpotRequest' is not null or undefined
            if (hotSpotRequest === null || hotSpotRequest === undefined) {
                throw new RequiredError('hotSpotRequest','Required parameter hotSpotRequest was null or undefined when calling hotspotApiV1HotspotPost.');
            }
            const localVarPath = `/scribe_connect/api/v1/hotspot`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBasic required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof hotSpotRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(hotSpotRequest !== undefined ? hotSpotRequest : {}) : (hotSpotRequest || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about cuurent state of the device.
         * @summary Info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        infoApiV1InfoGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/scribe_connect/api/v1/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBasic required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Verifies provided password. Responses with alive=True if password is correct.
         * @summary Login
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginApiV1LoginGet: async (password: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'password' is not null or undefined
            if (password === null || password === undefined) {
                throw new RequiredError('password','Required parameter password was null or undefined when calling loginApiV1LoginGet.');
            }
            const localVarPath = `/scribe_connect/api/v1/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Scan for nearby wifi networks. If device currenctly in hotspot mode - hotspot will be suspended.
         * @summary Scan
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scanApiV1ScanPost: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/scribe_connect/api/v1/scan`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBasic required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Check if service is alive or not.
         * @summary Alive
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aliveApiV1AliveGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).aliveApiV1AliveGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Change password
         * @summary Change Password
         * @param {ChangePasswordRequest} changePasswordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changePasswordApiV1ChangePasswordPatch(changePasswordRequest: ChangePasswordRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).changePasswordApiV1ChangePasswordPatch(changePasswordRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Connect device to the WiFi network.
         * @summary Connect
         * @param {ConnectRequest} connectRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async connectApiV1ConnectPost(connectRequest: ConnectRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).connectApiV1ConnectPost(connectRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get list of previously scanned networks. If networks wasnt scanned - it will response with error.
         * @summary Get Networks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNetworksApiV1NetworksGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworksResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getNetworksApiV1NetworksGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create hotspot. If device was connected to wifi network, it will be disconnected.
         * @summary Hotspot
         * @param {HotSpotRequest} hotSpotRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hotspotApiV1HotspotPost(hotSpotRequest: HotSpotRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).hotspotApiV1HotspotPost(hotSpotRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get information about cuurent state of the device.
         * @summary Info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async infoApiV1InfoGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).infoApiV1InfoGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Verifies provided password. Responses with alive=True if password is correct.
         * @summary Login
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginApiV1LoginGet(password: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).loginApiV1LoginGet(password, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Scan for nearby wifi networks. If device currenctly in hotspot mode - hotspot will be suspended.
         * @summary Scan
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async scanApiV1ScanPost(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).scanApiV1ScanPost(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Check if service is alive or not.
         * @summary Alive
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aliveApiV1AliveGet(options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).aliveApiV1AliveGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Change password
         * @summary Change Password
         * @param {ChangePasswordRequest} changePasswordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePasswordApiV1ChangePasswordPatch(changePasswordRequest: ChangePasswordRequest, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).changePasswordApiV1ChangePasswordPatch(changePasswordRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Connect device to the WiFi network.
         * @summary Connect
         * @param {ConnectRequest} connectRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        connectApiV1ConnectPost(connectRequest: ConnectRequest, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).connectApiV1ConnectPost(connectRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get list of previously scanned networks. If networks wasnt scanned - it will response with error.
         * @summary Get Networks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNetworksApiV1NetworksGet(options?: any): AxiosPromise<NetworksResponse> {
            return DefaultApiFp(configuration).getNetworksApiV1NetworksGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Create hotspot. If device was connected to wifi network, it will be disconnected.
         * @summary Hotspot
         * @param {HotSpotRequest} hotSpotRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hotspotApiV1HotspotPost(hotSpotRequest: HotSpotRequest, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).hotspotApiV1HotspotPost(hotSpotRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about cuurent state of the device.
         * @summary Info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        infoApiV1InfoGet(options?: any): AxiosPromise<any> {
            return DefaultApiFp(configuration).infoApiV1InfoGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Verifies provided password. Responses with alive=True if password is correct.
         * @summary Login
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginApiV1LoginGet(password: string, options?: any): AxiosPromise<LoginResponse> {
            return DefaultApiFp(configuration).loginApiV1LoginGet(password, options).then((request) => request(axios, basePath));
        },
        /**
         * Scan for nearby wifi networks. If device currenctly in hotspot mode - hotspot will be suspended.
         * @summary Scan
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scanApiV1ScanPost(options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).scanApiV1ScanPost(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Check if service is alive or not.
     * @summary Alive
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public aliveApiV1AliveGet(options?: any) {
        return DefaultApiFp(this.configuration).aliveApiV1AliveGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Change password
     * @summary Change Password
     * @param {ChangePasswordRequest} changePasswordRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public changePasswordApiV1ChangePasswordPatch(changePasswordRequest: ChangePasswordRequest, options?: any) {
        return DefaultApiFp(this.configuration).changePasswordApiV1ChangePasswordPatch(changePasswordRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Connect device to the WiFi network.
     * @summary Connect
     * @param {ConnectRequest} connectRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public connectApiV1ConnectPost(connectRequest: ConnectRequest, options?: any) {
        return DefaultApiFp(this.configuration).connectApiV1ConnectPost(connectRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get list of previously scanned networks. If networks wasnt scanned - it will response with error.
     * @summary Get Networks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getNetworksApiV1NetworksGet(options?: any) {
        return DefaultApiFp(this.configuration).getNetworksApiV1NetworksGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create hotspot. If device was connected to wifi network, it will be disconnected.
     * @summary Hotspot
     * @param {HotSpotRequest} hotSpotRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public hotspotApiV1HotspotPost(hotSpotRequest: HotSpotRequest, options?: any) {
        return DefaultApiFp(this.configuration).hotspotApiV1HotspotPost(hotSpotRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get information about cuurent state of the device.
     * @summary Info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public infoApiV1InfoGet(options?: any) {
        return DefaultApiFp(this.configuration).infoApiV1InfoGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Verifies provided password. Responses with alive=True if password is correct.
     * @summary Login
     * @param {string} password 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public loginApiV1LoginGet(password: string, options?: any) {
        return DefaultApiFp(this.configuration).loginApiV1LoginGet(password, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Scan for nearby wifi networks. If device currenctly in hotspot mode - hotspot will be suspended.
     * @summary Scan
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public scanApiV1ScanPost(options?: any) {
        return DefaultApiFp(this.configuration).scanApiV1ScanPost(options).then((request) => request(this.axios, this.basePath));
    }
}


